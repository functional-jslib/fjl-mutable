{"version":3,"file":"fjl-mutable.js","sources":["../../src/fjlMutable.js"],"sourcesContent":["/**\r\n * @module fjlMutable\r\n */\r\nimport {isUndefined, curry, apply, isType} from 'fjl';\r\n\r\nimport {errorIfNotType, getTypeName} from 'fjl-error-throwing';\r\n\r\n/**\r\n * @param enumerable {Boolean}\r\n * @returns {function(*, *)|PropsDefinerCall}\r\n * @private\r\n */\r\nfunction _getDefineProps$ (enumerable) {\r\n    const op$ = enumerable ? defineEnumProp$ : defineProp$;\r\n    return (argTuples, target) => {\r\n        const targetDescriptorTupleArg = [target];\r\n        return argTuples.map(argTuple => {\r\n            let result;\r\n            switch (argTuple.length) {\r\n                case 2:\r\n                    result = apply(op$, argTuple.concat(targetDescriptorTupleArg));\r\n                    break;\r\n                case 3:\r\n                    const [TypeRef, propName, defaultValue] = argTuple;\r\n                    result = apply(op$, [TypeRef, propName, target, defaultValue]);\r\n                    break;\r\n                default:\r\n                    result = apply(op$, argTuple);\r\n                    break;\r\n            }\r\n            return result;\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * @note Custom jsdoc type definitions defined toward end of file.\r\n */\r\nexport const\r\n\r\n    /**\r\n     * @function module:fjlMutable._descriptorForSettable\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param propName {String}\r\n     * @param target {*}\r\n     * @returns {Descriptor} - Property descriptor with just getter and setter.\r\n     * @private\r\n     */\r\n    _descriptorForSettable = (Type, propName, target) => {\r\n        let _value;\r\n        return {\r\n            get: function () {\r\n                return _value;\r\n            },\r\n            set: function (value) {\r\n                _value = errorIfNotTypeOnTarget(Type, propName, target, value);\r\n            }\r\n        };\r\n    },\r\n\r\n    /**\r\n     * @function module:fjlMutable._makeDescriptorEnumerable\r\n     * @param {TargetDescriptorTuple} - [target, descriptor] tuple.\r\n     * @returns {TargetDescriptorTuple} - Array of target and descriptor.\r\n     * @private\r\n     */\r\n    _makeDescriptorEnumerable = ([target, descriptor]) => {\r\n        descriptor.enumerable = true;\r\n        return [target, descriptor];\r\n    },\r\n\r\n    _targetDescriptorTuple = targetOrTargetDescrTuple =>\r\n        isType('Array', targetOrTargetDescrTuple) ? // Strict type check for array\r\n            targetOrTargetDescrTuple : [targetOrTargetDescrTuple],\r\n\r\n    /**\r\n     * @function module:fjlMutable.errorIfNotTypeOnTarget$\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param propName {String}\r\n     * @param target {*}\r\n     * @param propValue {*}\r\n     * @returns {*} - `propValue`\r\n     */\r\n    errorIfNotTypeOnTarget$ = (Type, propName, target, propValue) => {\r\n        errorIfNotType(getTypeName(Type), target, propName, propValue);\r\n        return propValue;\r\n    },\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineProp$\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param propName {String}\r\n     * @param target {TargetDescriptorTuple} - Target or array of target and descriptor ([target, descriptor]).\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     */\r\n    defineProp$ = (Type, propName, target, defaultValue = undefined) => {\r\n        const [_target, _descriptor] = _targetDescriptorTuple(target),\r\n            descriptor = _descriptor || _descriptorForSettable(Type, propName, _target);\r\n        Object.defineProperty(_target, propName, descriptor);\r\n        if (!isUndefined(defaultValue)) {\r\n            _target[propName] = defaultValue;\r\n        }\r\n        return [_target, descriptor];\r\n    },\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineProp$\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param propName {String}\r\n     * @param target {TargetDescriptorTuple} - Target or array of target and descriptor ([target, descriptor]).\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     */\r\n    defineEnumProp$ = (Type, propName, target, defaultValue = undefined) => {\r\n        const [_target, _descriptor] = _targetDescriptorTuple(target),\r\n            descriptor = _descriptor || _descriptorForSettable(Type, propName, _target);\r\n        return defineProp$(\r\n            Type, propName,\r\n            _makeDescriptorEnumerable([_target, descriptor]),\r\n            defaultValue\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Allows you to define multiple enum props at once on target.\r\n     * @function module:fjlMutable.defineEnumProps$\r\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineEnumProp`.\r\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineEnumProp`.\r\n     */\r\n    defineEnumProps$ = _getDefineProps$(true),\r\n\r\n    /**\r\n     * Allows you to define multiple props at once on target.\r\n     * @function module:fjlMutable.defineProps$\r\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineProp`.\r\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineProp`.\r\n     */\r\n    defineProps$ = _getDefineProps$(false),\r\n\r\n    /**\r\n     * @function module:fjlMutable.errorIfNotTypeOnTarget\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param propName {String}\r\n     * @param target {*}\r\n     * @param propValue {*}\r\n     * @returns {*} - `propValue`\r\n     * @curried\r\n     */\r\n    errorIfNotTypeOnTarget = curry(errorIfNotTypeOnTarget$),\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineProp\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    defineProp = curry(defineProp$),\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineEnumProp\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    defineEnumProp = curry(defineEnumProp$),\r\n\r\n    /**\r\n     * Same as `defineProps$` but curried:\r\n     *  Allows you to define multiple props at once on target.\r\n     * @function module:fjlMutable.defineProps\r\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineProp`.\r\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineProp`.\r\n     * @curried\r\n     */\r\n    defineProps = curry(defineProps$),\r\n\r\n    /**\r\n     * Same as `defineEnumProps$` but curried:\r\n     *  Allows you to define multiple enum props at once on target.\r\n     * @function module:fjlMutable.defineEnumProps\r\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineEnumProp`.\r\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineEnumProp`.\r\n     * @curried\r\n     */\r\n    defineEnumProps = curry(defineEnumProps$),\r\n\r\n    /**\r\n     * @function module:fjlMutable.definePropArray\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    definePropArray = defineProp(Array),\r\n\r\n    /**\r\n     * @function module:fjlMutable.definePropBoolean\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    definePropBoolean = defineProp(Boolean),\r\n\r\n    /**\r\n     * @function module:fjlMutable.definePropFunction\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    definePropFunction = defineProp(Function),\r\n\r\n    /**\r\n     * @function module:fjlMutable.definePropNumber\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    definePropNumber = defineProp(Number),\r\n\r\n    /**\r\n     * @function module:fjlMutable.definePropString\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    definePropString = defineProp(String),\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineEnumPropArray\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    defineEnumPropArray = defineEnumProp(Array),\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineEnumPropBoolean\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    defineEnumPropBoolean = defineEnumProp(Boolean),\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineEnumPropFunction\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    defineEnumPropFunction = defineEnumProp(Function),\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineEnumPropNumber\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    defineEnumPropNumber = defineEnumProp(Number),\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineEnumPropString\r\n     * @param propName {String}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    defineEnumPropString = defineEnumProp(String)\r\n\r\n;\r\n\r\n/** ============================================================= */\r\n/** Type definitions:                                             */\r\n/** ============================================================= */\r\n/**\r\n * @typedef {String|Function} TypeRef\r\n * @description Type reference.  Either actual type or type's name;  E.g., `Type.name`\r\n */\r\n\r\n/**\r\n * @typedef {*} Target\r\n */\r\n\r\n/**\r\n * @typedef {Object} Descriptor\r\n */\r\n\r\n/**\r\n * @typedef {Array<Target, Descriptor>} TargetDescriptorTuple\r\n */\r\n\r\n/**\r\n * @typedef {Array.<TypeRef, String, TargetDescriptorTuple, *>}  DefinePropArgsTuple\r\n * @description Arguments list for `defineProp` and/or `defineEnumProp` (note: some\r\n *  parts of array/tuple are options (namely the last two args));  E.g.,\r\n *  ```\r\n *  [String, 'somePropName', [someTarget], 'someDefaultValue] // ...\r\n *  ```\r\n */\r\n\r\n/**\r\n * @typedef {Function} PropsDefinerCall\r\n * @description Same type as `defineProp` and `defineEnumProp`\r\n * @param argsTuple {DefinePropArgsTuple}\r\n * @param target {Target}\r\n * @returns {Array.<TargetDescriptorTuple>}\r\n */\r\n"],"names":["_getDefineProps$","enumerable","op$","defineEnumProp$","defineProp$","argTuples","target","targetDescriptorTupleArg","map","result","argTuple","length","apply","concat","TypeRef","propName","defaultValue","_descriptorForSettable","Type","_value","value","errorIfNotTypeOnTarget","_makeDescriptorEnumerable","descriptor","_targetDescriptorTuple","isType","targetOrTargetDescrTuple","errorIfNotTypeOnTarget$","propValue","getTypeName","undefined","_target","_descriptor","defineProperty","isUndefined","defineEnumProps$","defineProps$","curry","defineProp","defineEnumProp","defineProps","defineEnumProps","definePropArray","Array","definePropBoolean","Boolean","definePropFunction","Function","definePropNumber","Number","definePropString","String","defineEnumPropArray","defineEnumPropBoolean","defineEnumPropFunction","defineEnumPropNumber","defineEnumPropString"],"mappings":"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"}