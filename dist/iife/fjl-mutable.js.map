{"version":3,"file":"fjl-mutable.js","sources":["../../src/fjlMutable.js"],"sourcesContent":["/**\n * @module fjlMutable\n */\nimport {isUndefined, curry, apply, isType} from 'fjl';\n\nimport {errorIfNotType, getTypeName} from 'fjl-error-throwing';\n\n/**\n * @param enumerable {Boolean}\n * @returns {function(*, *)|PropsDefinerCall}\n * @private\n */\nfunction _getDefineProps$ (enumerable) {\n    const operation$ = enumerable ? defineEnumProp$ : defineProp$;\n    return (argTuples, target) => {\n        argTuples.forEach(argTuple => {\n            const [TypeRef, propName, defaultValue] = argTuple;\n            apply(operation$, [TypeRef, target, propName, defaultValue]);\n        });\n        return target;\n    };\n}\n\n/**\n * @note Custom jsdoc type definitions defined toward end of file.\n */\nexport const\n\n    /**\n     * @function module:fjlMutable._descriptorForSettable\n     * @param Type {TypeRef} - {String|Function}\n     * @param target {*}\n     * @param propName {String}\n     * @returns {Descriptor} - Property descriptor with just getter and setter.\n     * @private\n     */\n    _descriptorForSettable = (Type, target, propName) => {\n        let _value;\n        return {\n            get: function () {\n                return _value;\n            },\n            set: function (value) {\n                _value = errorIfNotTypeOnTarget(Type, propName, target, value);\n            }\n        };\n    },\n\n    /**\n     * @function module:fjlMutable._makeDescriptorEnumerable\n     * @param {TargetDescriptorTuple} - [target, descriptor] tuple.\n     * @returns {TargetDescriptorTuple} - Array of target and descriptor.\n     * @private\n     */\n    _makeDescriptorEnumerable = ([target, descriptor]) => {\n        descriptor.enumerable = true;\n        return [target, descriptor];\n    },\n\n    _targetDescriptorTuple = targetOrTargetDescrTuple =>\n        isType('Array', targetOrTargetDescrTuple) ? // Strict type check for array\n            targetOrTargetDescrTuple : [targetOrTargetDescrTuple],\n\n    /**\n     * @function module:fjlMutable.errorIfNotTypeOnTarget$\n     * @param Type {TypeRef} - {String|Function}\n     * @param target {*}\n     * @param propName {String}\n     * @param propValue {*}\n     * @returns {*} - `propValue`\n     */\n    errorIfNotTypeOnTarget$ = (Type, target, propName, propValue) => {\n        errorIfNotType(getTypeName(Type), target, propName, propValue);\n        return propValue;\n    },\n\n    /**\n     * @function module:fjlMutable.defineProp$\n     * @param Type {TypeRef} - {String|Function}\n     * @param target {TargetDescriptorTuple} - Target or array of target and descriptor ([target, descriptor]).\n     * @param propName {String}\n     * @param [defaultValue=undefined] {*}\n     * @returns {TargetDescriptorTuple}\n     */\n    defineProp$ = (Type, target, propName, defaultValue = undefined) => {\n        const [_target, _descriptor] = _targetDescriptorTuple(target),\n            descriptor = _descriptor || _descriptorForSettable(Type, _target, propName);\n        Object.defineProperty(_target, propName, descriptor);\n        if (!isUndefined(defaultValue)) {\n            _target[propName] = defaultValue;\n        }\n        return [_target, descriptor];\n    },\n\n    /**\n     * @function module:fjlMutable.defineProp$\n     * @param Type {TypeRef} - {String|Function}\n     * @param target {TargetDescriptorTuple} - Target or array of target and descriptor ([target, descriptor]).\n     * @param propName {String}\n     * @param [defaultValue=undefined] {*}\n     * @returns {TargetDescriptorTuple}\n     */\n    defineEnumProp$ = (Type, target, propName, defaultValue = undefined) => {\n        const [_target, _descriptor] = _targetDescriptorTuple(target),\n            descriptor = _descriptor || _descriptorForSettable(Type, _target, propName);\n        return defineProp$(\n            Type,\n            _makeDescriptorEnumerable([_target, descriptor]),\n            propName,\n            defaultValue\n        );\n    },\n\n    /**\n     * Allows you to define multiple enum props at once on target.\n     * @function module:fjlMutable.defineEnumProps$\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineEnumProp`.\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineEnumProp`.\n     */\n    defineEnumProps$ = _getDefineProps$(true),\n\n    /**\n     * Allows you to define multiple props at once on target.\n     * @function module:fjlMutable.defineProps$\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineProp`.\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineProp`.\n     */\n    defineProps$ = _getDefineProps$(false),\n\n    /**\n     * @function module:fjlMutable.errorIfNotTypeOnTarget\n     * @param Type {TypeRef} - {String|Function}\n     * @param target {*}\n     * @param propName {String}\n     * @param propValue {*}\n     * @returns {*} - `propValue`\n     * @curried\n     */\n    errorIfNotTypeOnTarget = curry(errorIfNotTypeOnTarget$),\n\n    /**\n     * @function module:fjlMutable.defineProp\n     * @param Type {TypeRef} - {String|Function}\n     * @param {TargetDescriptorTuple} - [target, descriptor].\n     * @param propName {String}\n     * @param [defaultValue=undefined] {*}\n     * @returns {TargetDescriptorTuple}\n     * @curried\n     */\n    defineProp = curry(defineProp$),\n\n    /**\n     * @function module:fjlMutable.defineEnumProp\n     * @param Type {TypeRef} - {String|Function}\n     * @param {TargetDescriptorTuple} - [target, descriptor].\n     * @param propName {String}\n     * @param [defaultValue=undefined] {*}\n     * @returns {TargetDescriptorTuple}\n     * @curried\n     */\n    defineEnumProp = curry(defineEnumProp$),\n\n    /**\n     * Same as `defineProps$` but curried:\n     *  Allows you to define multiple props at once on target.\n     * @function module:fjlMutable.defineProps\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineProp`.\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineProp`.\n     * @curried\n     */\n    defineProps = curry(defineProps$),\n\n    /**\n     * Same as `defineEnumProps$` but curried:\n     *  Allows you to define multiple enum props at once on target.\n     * @function module:fjlMutable.defineEnumProps\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineEnumProp`.\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineEnumProp`.\n     * @curried\n     */\n    defineEnumProps = curry(defineEnumProps$)\n\n;\n\n/** ============================================================= */\n/** Type definitions:                                             */\n/** ============================================================= */\n/**\n * @typedef {String|Function} TypeRef\n * @description Type reference.  Either actual type or type's name;  E.g., `Type.name`\n */\n\n/**\n * @typedef {*} Target\n */\n\n/**\n * @typedef {Object} Descriptor\n */\n\n/**\n * @typedef {Array<Target, Descriptor>} TargetDescriptorTuple\n */\n\n/**\n * @typedef {Array.<TypeRef, TargetDescriptorTuple, String, *>}  DefinePropArgsTuple\n * @description Arguments list for `defineProp` and/or `defineEnumProp` (note: some\n *  parts of array/tuple are options (namely the last two args));  E.g.,\n *  ```\n *  [String, [someTarget], 'somePropName', 'someDefaultValue] // ...\n *  ```\n */\n\n/**\n * @typedef {Function} PropsDefinerCall\n * @description Same type as `defineProp` and `defineEnumProp`\n * @param argsTuple {DefinePropArgsTuple}\n * @param target {Target}\n * @returns {Array.<TargetDescriptorTuple>}\n */\n"],"names":["_getDefineProps$","enumerable","operation$","defineEnumProp$","defineProp$","argTuples","target","forEach","argTuple","TypeRef","propName","defaultValue","_descriptorForSettable","Type","_value","value","errorIfNotTypeOnTarget","_makeDescriptorEnumerable","descriptor","_targetDescriptorTuple","isType","targetOrTargetDescrTuple","errorIfNotTypeOnTarget$","propValue","getTypeName","undefined","_target","_descriptor","defineProperty","isUndefined","defineEnumProps$","defineProps$","curry","defineProp","defineEnumProp","defineProps","defineEnumProps"],"mappings":"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"}