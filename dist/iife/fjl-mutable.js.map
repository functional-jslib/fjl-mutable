{"version":3,"file":"fjl-mutable.js","sources":["../../src/fjlMutable.js"],"sourcesContent":["/**\r\n * @module fjlMutable\r\n */\r\nimport {isUndefined, curry, apply, isType, toTypeRefName, errorIfNotType} from 'fjl';\r\n\r\n/**\r\n * @param enumerable {Boolean}\r\n * @returns {function(*, *)|PropsDefinerCall}\r\n * @private\r\n */\r\nfunction _getDefineProps$ (enumerable) {\r\n    const operation$ = enumerable ? defineEnumProp$ : defineProp$;\r\n    return (argTuples, target) => {\r\n        argTuples.forEach(argTuple => {\r\n            const [TypeRef, propName, defaultValue] = argTuple;\r\n            apply(operation$, [TypeRef, target, propName, defaultValue]);\r\n        });\r\n        return target;\r\n    };\r\n}\r\n\r\n/**\r\n * @note Custom jsdoc type definitions defined toward end of file.\r\n */\r\nexport const\r\n\r\n    /**\r\n     * @function module:fjlMutable._descriptorForSettable\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param target {*}\r\n     * @param propName {String}\r\n     * @returns {Descriptor} - Property descriptor with just getter and setter.\r\n     * @private\r\n     */\r\n    _descriptorForSettable = (Type, target, propName) => {\r\n        let _value;\r\n        return {\r\n            get: function () {\r\n                return _value;\r\n            },\r\n            set: function (value) {\r\n                _value = errorIfNotTypeOnTarget(Type, propName, target, value);\r\n            }\r\n        };\r\n    },\r\n\r\n    /**\r\n     * @function module:fjlMutable._makeDescriptorEnumerable\r\n     * @param {TargetDescriptorTuple} - [target, descriptor] tuple.\r\n     * @returns {TargetDescriptorTuple} - Array of target and descriptor.\r\n     * @private\r\n     */\r\n    _makeDescriptorEnumerable = ([target, descriptor]) => {\r\n        descriptor.enumerable = true;\r\n        return [target, descriptor];\r\n    },\r\n\r\n    _targetDescriptorTuple = targetOrTargetDescrTuple =>\r\n        isType('Array', targetOrTargetDescrTuple) ? // Strict type check for array\r\n            targetOrTargetDescrTuple : [targetOrTargetDescrTuple],\r\n\r\n    /**\r\n     * @function module:fjlMutable.errorIfNotTypeOnTarget$\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param target {*}\r\n     * @param propName {String}\r\n     * @param propValue {*}\r\n     * @returns {*} - `propValue`\r\n     */\r\n    errorIfNotTypeOnTarget$ = (Type, target, propName, propValue) => {\r\n        errorIfNotType(toTypeRefName(Type), target, propName, propValue);\r\n        return propValue;\r\n    },\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineProp$\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param target {TargetDescriptorTuple} - Target or array of target and descriptor ([target, descriptor]).\r\n     * @param propName {String}\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     */\r\n    defineProp$ = (Type, target, propName, defaultValue = undefined) => {\r\n        const [_target, _descriptor] = _targetDescriptorTuple(target),\r\n            descriptor = _descriptor || _descriptorForSettable(Type, _target, propName);\r\n        Object.defineProperty(_target, propName, descriptor);\r\n        if (!isUndefined(defaultValue)) {\r\n            _target[propName] = defaultValue;\r\n        }\r\n        return [_target, descriptor];\r\n    },\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineProp$\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param target {TargetDescriptorTuple} - Target or array of target and descriptor ([target, descriptor]).\r\n     * @param propName {String}\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     */\r\n    defineEnumProp$ = (Type, target, propName, defaultValue = undefined) => {\r\n        const [_target, _descriptor] = _targetDescriptorTuple(target),\r\n            descriptor = _descriptor || _descriptorForSettable(Type, _target, propName);\r\n        return defineProp$(\r\n            Type,\r\n            _makeDescriptorEnumerable([_target, descriptor]),\r\n            propName,\r\n            defaultValue\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Allows you to define multiple enum props at once on target.\r\n     * @function module:fjlMutable.defineEnumProps$\r\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineEnumProp`.\r\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineEnumProp`.\r\n     */\r\n    defineEnumProps$ = _getDefineProps$(true),\r\n\r\n    /**\r\n     * Allows you to define multiple props at once on target.\r\n     * @function module:fjlMutable.defineProps$\r\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineProp`.\r\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineProp`.\r\n     */\r\n    defineProps$ = _getDefineProps$(false),\r\n\r\n    /**\r\n     * @function module:fjlMutable.errorIfNotTypeOnTarget\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param target {*}\r\n     * @param propName {String}\r\n     * @param propValue {*}\r\n     * @returns {*} - `propValue`\r\n     * @curried\r\n     */\r\n    errorIfNotTypeOnTarget = curry(errorIfNotTypeOnTarget$),\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineProp\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param propName {String}\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    defineProp = curry(defineProp$),\r\n\r\n    /**\r\n     * @function module:fjlMutable.defineEnumProp\r\n     * @param Type {TypeRef} - {String|Function}\r\n     * @param {TargetDescriptorTuple} - [target, descriptor].\r\n     * @param propName {String}\r\n     * @param [defaultValue=undefined] {*}\r\n     * @returns {TargetDescriptorTuple}\r\n     * @curried\r\n     */\r\n    defineEnumProp = curry(defineEnumProp$),\r\n\r\n    /**\r\n     * Same as `defineProps$` but curried:\r\n     *  Allows you to define multiple props at once on target.\r\n     * @function module:fjlMutable.defineProps\r\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineProp`.\r\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineProp`.\r\n     * @curried\r\n     */\r\n    defineProps = curry(defineProps$),\r\n\r\n    /**\r\n     * Same as `defineEnumProps$` but curried:\r\n     *  Allows you to define multiple enum props at once on target.\r\n     * @function module:fjlMutable.defineEnumProps\r\n     * @param argsTuple {Array.<DefinePropArgsTuple>} - Array of argArrays for `defineEnumProp`.\r\n     * @param [target = undefined] {Target} - Target to use in internal calls if one is not provided but encountered 'argArray'.\r\n     * @returns {Array.<TargetDescriptorTuple>} - Results of each call to `defineEnumProp`.\r\n     * @curried\r\n     */\r\n    defineEnumProps = curry(defineEnumProps$)\r\n\r\n;\r\n\r\n/** ============================================================= */\r\n/** Type definitions:                                             */\r\n/** ============================================================= */\r\n/**\r\n * @typedef {String|Function} TypeRef\r\n * @description Type reference.  Either actual type or type's name;  E.g., `Type.name`\r\n */\r\n\r\n/**\r\n * @typedef {*} Target\r\n */\r\n\r\n/**\r\n * @typedef {Object} Descriptor\r\n */\r\n\r\n/**\r\n * @typedef {Array<Target, Descriptor>} TargetDescriptorTuple\r\n */\r\n\r\n/**\r\n * @typedef {Array.<TypeRef, TargetDescriptorTuple, String, *>}  DefinePropArgsTuple\r\n * @description Arguments list for `defineProp` and/or `defineEnumProp` (note: some\r\n *  parts of array/tuple are options (namely the last two args));  E.g.,\r\n *  ```\r\n *  [String, [someTarget], 'somePropName', 'someDefaultValue] // ...\r\n *  ```\r\n */\r\n\r\n/**\r\n * @typedef {Function} PropsDefinerCall\r\n * @description Same type as `defineProp` and `defineEnumProp`\r\n * @param argsTuple {DefinePropArgsTuple}\r\n * @param target {Target}\r\n * @returns {Array.<TargetDescriptorTuple>}\r\n */\r\n"],"names":["_getDefineProps$","enumerable","operation$","defineEnumProp$","defineProp$","argTuples","target","forEach","argTuple","TypeRef","propName","defaultValue","_descriptorForSettable","Type","_value","value","errorIfNotTypeOnTarget","_makeDescriptorEnumerable","descriptor","_targetDescriptorTuple","isType","targetOrTargetDescrTuple","errorIfNotTypeOnTarget$","propValue","toTypeRefName","undefined","_target","_descriptor","defineProperty","isUndefined","defineEnumProps$","defineProps$","curry","defineProp","defineEnumProp","defineProps","defineEnumProps"],"mappings":"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"}